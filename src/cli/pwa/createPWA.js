import path from 'path';
import fs from 'fs';
import inquirer from 'inquirer';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const DISPLAY_OPTIONS = ['standalone', 'fullscreen', 'minimal-ui', 'browser'];

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π PWA-–ø—Ä–æ–µ–∫—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π
 * @param {string} projectName - –ò–º—è –ø—Ä–æ–µ–∫—Ç–∞
 * @param {object} options - –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (manifest, silent –∏ —Ç.–¥.)
 * @returns {Promise<{projectDir: string, manifest: object, manifestConfig: object}>}
 */
export async function createPWAProject(projectName, options = {}) {
  if (!projectName) {
    throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞');
  }

  const projectDir = path.join(process.cwd(), projectName);
  if (fs.existsSync(projectDir)) {
    throw new Error(`–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è "${projectName}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`);
  }

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏ –∏–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const manifestConfig = options.manifest ||
    await inquirer.prompt([
      {
        type: 'input',
        name: 'name',
        message: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:',
        default: projectName
      },
      {
        type: 'input',
        name: 'shortName',
        message: '–ö–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–¥–æ 12 —Å–∏–º–≤–æ–ª–æ–≤):',
        default: projectName,
        validate: (input) => input.length <= 12 || '–ù–µ –±–æ–ª–µ–µ 12 —Å–∏–º–≤–æ–ª–æ–≤'
      },
      {
        type: 'input',
        name: 'description',
        message: '–û–ø–∏—Å–∞–Ω–∏–µ:',
        default: 'Progressive Web Application'
      },
      {
        type: 'list',
        name: 'display',
        message: 'Display mode:',
        choices: DISPLAY_OPTIONS,
        default: 'standalone'
      },
      {
        type: 'input',
        name: 'backgroundColor',
        message: 'Background color (hex code):',
        default: '#ffffff',
        validate: (input) => /^#[0-9A-Fa-f]{6}$/.test(input) || '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π hex (–Ω–∞–ø—Ä–∏–º–µ—Ä, #ffffff)'
      },
      {
        type: 'input',
        name: 'themeColor',
        message: '–¶–≤–µ—Ç —Ç–µ–º—ã (hex code):',
        default: '#2196f3',
        validate: (input) => /^#[0-9A-Fa-f]{6}$/.test(input) || '–í–≤–µ–¥–∏—Ç–µ hex, –Ω–∞–ø—Ä–∏–º–µ—Ä #2196f3'
      },
      {
        type: 'confirm',
        name: 'generateIcons',
        message: '–î–æ–±–∞–≤–∏—Ç—å –∏–∫–æ–Ω–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?',
        default: true
      }
    ]);

  // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
  fs.mkdirSync(projectDir, { recursive: true });

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ manifest.json
  const manifest = {
    name: manifestConfig.name,
    short_name: manifestConfig.shortName,
    description: manifestConfig.description,
    start_url: '.',
    display: manifestConfig.display,
    background_color: manifestConfig.backgroundColor,
    theme_color: manifestConfig.themeColor,
    icons: [
      {
        src: 'icons/icon-192x192.png',
        sizes: '192x192',
        type: 'image/png'
      },
      {
        src: 'icons/icon-512x512.png',
        sizes: '512x512',
        type: 'image/png'
      }
    ]
  };

  const templateDir = path.join(__dirname, '..', 'templates');

  // –ö–æ–ø–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã —à–∞–±–ª–æ–Ω–∞
  ['index.html', 'serviceWorker.js', 'offline.html'].forEach(file => {
    const src = path.join(templateDir, file);
    const dest = path.join(projectDir, file);
    if (fs.existsSync(src)) {
      let content = fs.readFileSync(src, 'utf8');
      if (file === 'index.html') {
        content = content.replace(/{{APP_NAME}}/g, manifestConfig.name)
          .replace(/{{THEME_COLOR}}/g, manifestConfig.themeColor);
      }
      fs.writeFileSync(dest, content);
    }
  });

  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º manifest.json
  fs.writeFileSync(
    path.join(projectDir, 'manifest.json'),
    JSON.stringify(manifest, null, 2)
  );

  // –ö–æ–ø–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫–∏, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ
  if (manifestConfig.generateIcons) {
    const iconsDir = path.join(templateDir, 'icons');
    const targetIconsDir = path.join(projectDir, 'icons');
    if (fs.existsSync(iconsDir)) {
      fs.mkdirSync(targetIconsDir, { recursive: true });
      fs.readdirSync(iconsDir).forEach(icon => {
        fs.copyFileSync(
          path.join(iconsDir, icon),
          path.join(targetIconsDir, icon)
        );
      });
    }
  }

  if (!options.silent) {
    console.log(`\nPWA –ø—Ä–æ–µ–∫—Ç "${projectName}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!`);
    console.log('\n–î–∞–ª—å–Ω–µ–π—à–∏–µ —à–∞–≥–∏:');
    console.log(`  1. cd ${projectName}`);
    console.log('  2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∞–π–ª—ã –ø–æ–¥ —Å–≤–æ–∏ –Ω—É–∂–¥—ã');
    console.log('  3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É PWA');
    console.log('  4. –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —Å—Ç–∏–ª–∏ –∏ –ª–æ–≥–∏–∫—É! üöÄ\n');
    console.log('–£–¥–∞—á–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!\n');
  }

  return { projectDir, manifest, manifestConfig };
}

// –§—É–Ω–∫—Ü–∏—è main –¥–ª—è CLI
export async function main() {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ –ø—Ä–æ–µ–∫—Ç–∞
    const projectName = process.argv[2];
    if (!projectName) {
      console.error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞');
      process.exit(1);
    }

    await createPWAProject(projectName);

    console.log(`\nPWA project "${projectName}" —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!`);
    console.log('\n–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log(`  1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞:\n     cd ${projectName}`);
    console.log('  2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∞–π–ª—ã –ø–æ —Å–≤–æ–∏–º –Ω—É–∂–¥–∞–º');
    console.log('  3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É PWA');
    console.log('  4. –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —Å—Ç–∏–ª–∏ –∏ –ª–æ–≥–∏–∫—É! üöÄ\n');
    console.log('–£–¥–∞—á–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!\n');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º main —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === fileURLToPath(import.meta.url)) {
  main();
}
